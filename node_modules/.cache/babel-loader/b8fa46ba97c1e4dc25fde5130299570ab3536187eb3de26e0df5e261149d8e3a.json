{"ast":null,"code":"var _jsxFileName = \"/Users/anand/Desktop/Cerebro/frontend/react-app/src/components/DbConnect.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../styles/DbConnect.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DbConnect = () => {\n  _s();\n  const [engine, setEngine] = useState('');\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [host, setHost] = useState('');\n  const [port, setPort] = useState('');\n  const [database, setDatabase] = useState('');\n  const [driver, setDriver] = useState('');\n  const [encrypt, setEncrypt] = useState('');\n  const [trustServerCertificate, setTrustServerCertificate] = useState('');\n  const isFormValid = () => {\n    // Add your form validation logic here\n  };\n  useEffect(() => {\n    // Add logic that needs to run when 'engine' changes\n  }, [engine]);\n  const handleSubmit = event => {\n    event.preventDefault();\n    // Add your submit logic here\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"CEREBRO\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        id: \"dbConnectForm\",\n        onSubmit: handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(DbConnect, \"6pLYIUBFTnSU6NZAcSDFjEPNGNw=\");\n_c = DbConnect;\nexport default DbConnect;\nvar _c;\n$RefreshReg$(_c, \"DbConnect\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","DbConnect","_s","engine","setEngine","username","setUsername","password","setPassword","host","setHost","port","setPort","database","setDatabase","driver","setDriver","encrypt","setEncrypt","trustServerCertificate","setTrustServerCertificate","isFormValid","handleSubmit","event","preventDefault","children","className","fileName","_jsxFileName","lineNumber","columnNumber","id","onSubmit","_c","$RefreshReg$"],"sources":["/Users/anand/Desktop/Cerebro/frontend/react-app/src/components/DbConnect.js"],"sourcesContent":["\nimport React, { useState, useEffect } from 'react';\nimport '../styles/DbConnect.css';\n\nconst DbConnect = () => {\n  const [engine, setEngine] = useState('');\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [host, setHost] = useState('');\n  const [port, setPort] = useState('');\n  const [database, setDatabase] = useState('');\n  const [driver, setDriver] = useState('');\n  const [encrypt, setEncrypt] = useState('');\n  const [trustServerCertificate, setTrustServerCertificate] = useState('');\n\n  const isFormValid = () => {\n    // Add your form validation logic here\n  };\n\n  useEffect(() => {\n    // Add logic that needs to run when 'engine' changes\n  }, [engine]);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    // Add your submit logic here\n  };\n\n  return (\n    <div>\n      <div className=\"header\">\n        <h1>CEREBRO</h1>\n      </div>\n      <div className=\"container\">\n        <form id=\"dbConnectForm\" onSubmit={handleSubmit}>\n          {/* Form fields */}\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default DbConnect;\n"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACY,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACc,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACgB,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACkB,MAAM,EAAEC,SAAS,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACoB,OAAO,EAAEC,UAAU,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACsB,sBAAsB,EAAEC,yBAAyB,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EAExE,MAAMwB,WAAW,GAAGA,CAAA,KAAM;IACxB;EAAA,CACD;EAEDvB,SAAS,CAAC,MAAM;IACd;EAAA,CACD,EAAE,CAACK,MAAM,CAAC,CAAC;EAEZ,MAAMmB,YAAY,GAAIC,KAAK,IAAK;IAC9BA,KAAK,CAACC,cAAc,CAAC,CAAC;IACtB;EACF,CAAC;EAED,oBACExB,OAAA;IAAAyB,QAAA,gBACEzB,OAAA;MAAK0B,SAAS,EAAC,QAAQ;MAAAD,QAAA,eACrBzB,OAAA;QAAAyB,QAAA,EAAI;MAAO;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACb,CAAC,eACN9B,OAAA;MAAK0B,SAAS,EAAC,WAAW;MAAAD,QAAA,eACxBzB,OAAA;QAAM+B,EAAE,EAAC,eAAe;QAACC,QAAQ,EAAEV;MAAa;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAE1C;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC5B,EAAA,CApCID,SAAS;AAAAgC,EAAA,GAAThC,SAAS;AAsCf,eAAeA,SAAS;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}